# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Gradle.gitlab-ci.yml

# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle

image: gradle:jdk17-alpine

before_script:
  - apk update
  - apk add docker
  - docker --version
  - apk add kubectl
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  - export GRADLE_USER_HOME

services:
  - name: docker:dind
    alias: docker
    command: ["--tls=false"]

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: unix:///var/run/docker.sock
  TESTCONTAINERS_HOST_OVERRIDE: "host.docker.internal"
  DOCKER_TLS_CERTDIR: "/certs"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  IMAGE_NAME: "service-actor-management"
  REGISTRY: "registry.gitlab.com/cinema7590904"

stages:
#  - build
#  - test
#  - sonar
  - deploy

#build:
#  stage: build
#  script:
#    - gradle --build-cache assemble
#    - docker build -t $REGISTRY/$IMAGE_NAME:latest .
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $REGISTRY
#    - docker push $REGISTRY/$IMAGE_NAME:latest
#  cache:
#    key: "$CI_COMMIT_REF_NAME"
#    policy: push
#    paths:
#      - build
#      - .gradle

#test:
#  stage: test
#  script: gradle check
#  cache:
#    key: "$CI_COMMIT_REF_NAME"
#    policy: pull
#    paths:
#      - build
#      - .gradle
#  artifacts:
#    reports:
#      junit: build/test-results/test/**/TEST-*.xml
#      coverage_report:
#        coverage_format: cobertura
#        path: build/reports/jacoco/test/jacocoTestReport.xml
#    paths:
#      - build/reports/jacoco/test/jacocoTestReport.xml
#  coverage: '/Total.*?([0-9,.]{1,5})%/'

#sonarcloud-check:
#  stage: sonar
#  cache:
#    key: "${CI_JOB_NAME}"
#    paths:
#      - .sonar/cache
#  script: gradle sonar
#  allow_failure: true

deploy:
  tags:
    - minikube
  stage: deploy
  when: manual
  before_script:
    - apk add kubectl
    - echo "$KUBECONFIG_CONTENT" | grep -v "client-certificate" | grep -v "client-key" | grep -v "certificate-authority" > kubeconfig.yaml
    - export KUBECONFIG=$(pwd)/kubeconfig.yaml
    - cat kubeconfig.yaml
    - kubectl config set-cluster minikube --kubeconfig=kubeconfig.yaml --server=https://192.168.49.2:55014 #--insecure-skip-tls-verify=true
  script:
    - kubectl config view
    - kubectl config get-contexts
    #- sleep 900
    - kubectl get nodes --as=system:serviceaccount:default:scr1-service-acc
    - kubectl apply -f ops/helm/mongo-deployment.yaml --validate=false
    - kubectl apply -f ops/helm/springboot-deployment.yaml
